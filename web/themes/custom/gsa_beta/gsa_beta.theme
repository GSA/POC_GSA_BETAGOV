<?php

/**
 * @file
 * Gsa Beta theme.
 *
 * Place your custom PHP code in this file.
 */

/**
 * Implements hook_preprocess().
 */
function gsa_beta_subtheme_preprocess(&$variables) {
  // Set the path to the base theme.
  $variables['active_theme_path'] = base_path() . \Drupal::theme()->getActiveTheme()->getPath();
  $variables['uswds_images'] = $variables['active_theme_path'] . '/node_modules/@uswds/uswds/dist/img/';
}

function gsa_beta_preprocess_page(&$variables, $hook) {
  $variables['#attached']['library'][] = 'gsa_beta/global-styling';
}

function gsa_beta_preprocess(&$variables, $hook) {
  $variables['#attached']['library'][] = 'gsa_beta/global-styling';

  $theme_path = base_path() . \Drupal::service('extension.path.resolver')->getPath('theme', 'gsa_beta');
  $variables['theme_path'] = $theme_path;
}


/**
 * Implements hook_preprocess_field().
 */
function gsa_beta_preprocess_field(&$variables) {
  if ($variables['element']['#field_name'] === 'field_how_to_buy_form_this_contr') {
    $variables['attributes']['class'][] = 'your-custom-class2';
  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function gsa_beta_preprocess_paragraph(&$variables) {
  // Fetch the paragraph type
  $paragraph_type = $variables['paragraph']->getType();

  // Prepare to collect field information
  $variables['debug_fields_info'] = [];

  // Iterate over all fields in the paragraph
  foreach ($variables['paragraph'] as $field_name => $field) {
    if (strpos($field_name, 'field_') === 0) { // Check if it's a field
      $field_label = $variables['paragraph']->get($field_name)->getFieldDefinition()->getLabel();
      $field_value = $variables['paragraph']->get($field_name)->getValue();
      $variables['debug_fields_info'][$field_name] = [
        'label' => $field_label,
        'value' => json_encode($field_value) // Encode to JSON for easier readability
      ];
    }
  }

  // If you want to apply a custom class to a specific paragraph type
  if ($paragraph_type === 'the_paragraph_type') {
    $variables['custom_title_class'] = 'custom-class-for-title';
  }

  // Output the collected field data to your Twig template
  $variables['debug_info'] = json_encode($variables['debug_fields_info']);
}
function gsa_beta_preprocess_node(&$variables) {
  if ($variables['node']->getType() == 'news_release') {
    $node = $variables['node'];

    // Prepends location string to the first <p> of the body field
    if ($node->hasField('field_news_location') && !$node->get('field_news_location')->isEmpty()) {
      $term = $node->get('field_news_location')->entity;
      $term_name = $term->label();
      $clean_name = preg_replace('/\s+\(\d+\)$/', '', $term_name);
      $location_string = '<span class="news-location-tag">' . $clean_name . ' â€” ' . '</span>';

      if ($node->hasField('body') && !$node->get('body')->isEmpty()) {
        $original_body_value = $node->get('body')->value;
        $original_body_value = preg_replace('/<p[^>]*>/', '$0' . $location_string, $original_body_value, 1);
        $variables['content']['body'][0]['#text'] = $original_body_value;
      }
    }

    // Load the GSA Social Links Block directly using the plugin manager
    $block_manager = \Drupal::service('plugin.manager.block');
    $config = []; // Configuration array, if any configurations are needed.
    $plugin_block = $block_manager->createInstance('gsa_social_links_block', $config);
    if ($plugin_block) {
      $variables['gsa_social_links_block'] = $plugin_block->build(); // Correctly use the build method directly
    }
  }
}
